// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: access_tokens.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAccessToken = `-- name: CreateAccessToken :one
INSERT INTO auth.access_tokens (session_id, token, expires_at)
VALUES ($1, $2, $3)
RETURNING id, session_id, token, created_at, expires_at
`

type CreateAccessTokenParams struct {
	SessionID pgtype.UUID        `json:"session_id"`
	Token     string             `json:"token"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) CreateAccessToken(ctx context.Context, arg CreateAccessTokenParams) (AuthAccessToken, error) {
	row := q.db.QueryRow(ctx, createAccessToken, arg.SessionID, arg.Token, arg.ExpiresAt)
	var i AuthAccessToken
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.Token,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteAccessToken = `-- name: DeleteAccessToken :exec
DELETE FROM auth.access_tokens
WHERE id = $1
`

func (q *Queries) DeleteAccessToken(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAccessToken, id)
	return err
}

const deleteAccessTokenBySessionID = `-- name: DeleteAccessTokenBySessionID :exec
DELETE FROM auth.access_tokens
WHERE session_id = $1
`

func (q *Queries) DeleteAccessTokenBySessionID(ctx context.Context, sessionID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteAccessTokenBySessionID, sessionID)
	return err
}

const getAccessTokenByToken = `-- name: GetAccessTokenByToken :one
SELECT id, session_id, token, created_at, expires_at FROM auth.access_tokens
WHERE token = $1
LIMIT 1
`

func (q *Queries) GetAccessTokenByToken(ctx context.Context, token string) (AuthAccessToken, error) {
	row := q.db.QueryRow(ctx, getAccessTokenByToken, token)
	var i AuthAccessToken
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.Token,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}
