// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: refresh_tokens.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO auth.refresh_tokens (
    session_id,
    token,
    expires_at
) VALUES (
    $1, $2, $3
) RETURNING id, session_id, token, created_at, expires_at, is_revoked
`

type CreateRefreshTokenParams struct {
	SessionID pgtype.UUID        `json:"session_id"`
	Token     string             `json:"token"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (AuthRefreshToken, error) {
	row := q.db.QueryRow(ctx, createRefreshToken, arg.SessionID, arg.Token, arg.ExpiresAt)
	var i AuthRefreshToken
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.Token,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.IsRevoked,
	)
	return i, err
}

const deleteRefreshTokenByID = `-- name: DeleteRefreshTokenByID :exec
DELETE FROM auth.refresh_tokens
WHERE id = $1
`

func (q *Queries) DeleteRefreshTokenByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteRefreshTokenByID, id)
	return err
}

const deleteRefreshTokenByToken = `-- name: DeleteRefreshTokenByToken :exec
DELETE FROM auth.refresh_tokens
WHERE token = $1
`

func (q *Queries) DeleteRefreshTokenByToken(ctx context.Context, token string) error {
	_, err := q.db.Exec(ctx, deleteRefreshTokenByToken, token)
	return err
}

const getRefreshTokenByToken = `-- name: GetRefreshTokenByToken :one
SELECT id, session_id, token, created_at, expires_at, is_revoked FROM auth.refresh_tokens
WHERE token = $1
LIMIT 1
`

func (q *Queries) GetRefreshTokenByToken(ctx context.Context, token string) (AuthRefreshToken, error) {
	row := q.db.QueryRow(ctx, getRefreshTokenByToken, token)
	var i AuthRefreshToken
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.Token,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.IsRevoked,
	)
	return i, err
}

const revokeAllRefreshTokensForSession = `-- name: RevokeAllRefreshTokensForSession :exec
UPDATE auth.refresh_tokens
SET is_revoked = true
WHERE session_id = $1
`

func (q *Queries) RevokeAllRefreshTokensForSession(ctx context.Context, sessionID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, revokeAllRefreshTokensForSession, sessionID)
	return err
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :one
UPDATE auth.refresh_tokens
SET is_revoked = true
WHERE id = $1
RETURNING id, session_id, token, created_at, expires_at, is_revoked
`

func (q *Queries) RevokeRefreshToken(ctx context.Context, id uuid.UUID) (AuthRefreshToken, error) {
	row := q.db.QueryRow(ctx, revokeRefreshToken, id)
	var i AuthRefreshToken
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.Token,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.IsRevoked,
	)
	return i, err
}
