// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: refresh_tokens.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO auth.refresh_tokens (
    user_id,
    session_id,
    token,
    expires_at
) VALUES (
    $1, $2, $3, $4
) RETURNING id, user_id, session_id, token, used, expires_at, created_at
`

type CreateRefreshTokenParams struct {
	UserID    uuid.UUID          `json:"user_id"`
	SessionID uuid.UUID          `json:"session_id"`
	Token     string             `json:"token"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (AuthRefreshToken, error) {
	row := q.db.QueryRow(ctx, createRefreshToken,
		arg.UserID,
		arg.SessionID,
		arg.Token,
		arg.ExpiresAt,
	)
	var i AuthRefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionID,
		&i.Token,
		&i.Used,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getRefreshTokenByID = `-- name: GetRefreshTokenByID :one
SELECT id, user_id, session_id, token, used, expires_at, created_at FROM auth.refresh_tokens
WHERE id = $1 AND expires_at > NOW()
LIMIT 1
`

func (q *Queries) GetRefreshTokenByID(ctx context.Context, id uuid.UUID) (AuthRefreshToken, error) {
	row := q.db.QueryRow(ctx, getRefreshTokenByID, id)
	var i AuthRefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionID,
		&i.Token,
		&i.Used,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getRefreshTokenByToken = `-- name: GetRefreshTokenByToken :one
SELECT id, user_id, session_id, token, used, expires_at, created_at FROM auth.refresh_tokens
WHERE token = $1 AND expires_at > NOW()
LIMIT 1
`

func (q *Queries) GetRefreshTokenByToken(ctx context.Context, token string) (AuthRefreshToken, error) {
	row := q.db.QueryRow(ctx, getRefreshTokenByToken, token)
	var i AuthRefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionID,
		&i.Token,
		&i.Used,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const markUsedRefreshTokenByID = `-- name: MarkUsedRefreshTokenByID :exec
UPDATE auth.refresh_tokens
SET used = TRUE
WHERE id = $1 AND expires_at > NOW()
`

func (q *Queries) MarkUsedRefreshTokenByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, markUsedRefreshTokenByID, id)
	return err
}

const markUsedRefreshTokenByToken = `-- name: MarkUsedRefreshTokenByToken :exec
UPDATE auth.refresh_tokens
SET used = TRUE
WHERE token = $1 AND expires_at > NOW()
`

func (q *Queries) MarkUsedRefreshTokenByToken(ctx context.Context, token string) error {
	_, err := q.db.Exec(ctx, markUsedRefreshTokenByToken, token)
	return err
}
