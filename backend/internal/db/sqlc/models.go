// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type AuthPaymentPlan string

const (
	AuthPaymentPlanFree    AuthPaymentPlan = "free"
	AuthPaymentPlanBasic   AuthPaymentPlan = "basic"
	AuthPaymentPlanPremium AuthPaymentPlan = "premium"
)

func (e *AuthPaymentPlan) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AuthPaymentPlan(s)
	case string:
		*e = AuthPaymentPlan(s)
	default:
		return fmt.Errorf("unsupported scan type for AuthPaymentPlan: %T", src)
	}
	return nil
}

type NullAuthPaymentPlan struct {
	AuthPaymentPlan AuthPaymentPlan `json:"auth_payment_plan"`
	Valid           bool            `json:"valid"` // Valid is true if AuthPaymentPlan is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAuthPaymentPlan) Scan(value interface{}) error {
	if value == nil {
		ns.AuthPaymentPlan, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AuthPaymentPlan.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAuthPaymentPlan) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AuthPaymentPlan), nil
}

type AuthRefreshToken struct {
	ID        uuid.UUID          `json:"id"`
	UserID    uuid.UUID          `json:"user_id"`
	SessionID uuid.UUID          `json:"session_id"`
	Token     string             `json:"token"`
	Used      bool               `json:"used"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

type AuthSession struct {
	ID        uuid.UUID          `json:"id"`
	UserID    uuid.UUID          `json:"user_id"`
	Token     string             `json:"token"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

type AuthUser struct {
	ID           uuid.UUID          `json:"id"`
	Email        string             `json:"email"`
	PasswordHash string             `json:"password_hash"`
	Name         pgtype.Text        `json:"name"`
	PaymentPlan  AuthPaymentPlan    `json:"payment_plan"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
}
